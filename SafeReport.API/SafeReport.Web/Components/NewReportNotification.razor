@using SafeReport.Web.DTOs
@using SafeReport.Web.Services
@inject NotificationService NotificationService
@inject IJSRuntime JS
@inject ReportService ReportService

<div class="position-relative m-2">
    <i class="bi bi-bell-fill"></i>
    <span class="badge bg-danger">@newReportsCount</span>
</div>

@code {
    private int newReportsCount = 0;
    private CancellationTokenSource? _resetToken;

    protected override async Task OnInitializedAsync()
    {
        NotificationService.OnNewReport += HandleNewReport;
        await NotificationService.StartAsync();

        var lastVisitStr = await JS.InvokeAsync<string>("localStorage.getItem", "LastVisit");
        DateTime lastVisitUtc = string.IsNullOrEmpty(lastVisitStr)
            ? DateTime.UtcNow
            : DateTime.Parse(lastVisitStr);

        // استدعاء أولي للحصول على عدد التقارير الجديدة
        int initialCount = await ReportService.GetNewReportsCountAsync(lastVisitUtc);
        if (initialCount > 0)
        {
            ShowTemporaryCount(initialCount);
        }

        await JS.InvokeVoidAsync("localStorage.setItem", "LastVisit", DateTime.UtcNow.ToString("o"));
    }

    private void HandleNewReport(ReportDTO report)
    {
        newReportsCount++;
        InvokeAsync(StateHasChanged);

        _resetToken?.Cancel();
        _resetToken = new CancellationTokenSource();
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(TimeSpan.FromMinutes(1), _resetToken.Token);
                newReportsCount = 0;
                await InvokeAsync(StateHasChanged);
            }
            catch (TaskCanceledException)
            {

            }
        });
    }

    private void ShowTemporaryCount(int count)
    {
        newReportsCount = count;
        InvokeAsync(StateHasChanged);

        _resetToken?.Cancel(); // إلغاء أي مؤقت سابق
        _resetToken = new CancellationTokenSource();
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(TimeSpan.FromMinutes(1), _resetToken.Token);
                newReportsCount = 0;
                await InvokeAsync(StateHasChanged);
            }
            catch (TaskCanceledException)
            {
                // تم الإلغاء
            }
        });
    }
}
