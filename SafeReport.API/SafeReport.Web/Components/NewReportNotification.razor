@using SafeReport.Web.DTOs
@using SafeReport.Web.Services
@using SafeReport.Web.StateContainers
@using System.Globalization
@inject NotificationService NotificationService
@inject IJSRuntime JS
@inject ReportService ReportService
@inject NavigationManager NavigationManager
@inject NotificationState NotificationState

<div class="position-relative m-3">
    <div class="notification-icon" @onclick="ToggleDropdown">
        <i class="bi bi-bell-fill"></i>
        <span class="notification-badge">@NotificationState.NewReportsCount</span>
    </div>

    @if (showDropdown && NotificationState.NewReports.Any())
    {
        <div class="dropdown-menu show dropdown-alert @(isArabic ? "rtl-alert" : "ltr-alert")" >
            @foreach (var report in NotificationState.NewReports)
            {
                <div class="dropdown-item d-flex justify-content-between align-items-center">
                    <span>@report.IncidentName</span>
                    <button class="btn btn-sm btn-primary" @onclick="() => NavigateToReport(report.Id)">View</button>
                </div>
                <div class="dropdown-divider"></div>
            }
            <div class="text-center p-1">
                <button class="btn btn-outline-secondary btn-sm" @onclick="ClearNotifications">Clear All</button>
            </div>
        </div>
    }
</div>
<style>
    .notification-icon {
        cursor: pointer;
        position: relative;
        font-size: 1rem;
    }

        .notification-icon i {
            color: #555;
        }

    .notification-badge {
        position: absolute;
        top: -11px;
        right: -6px;
        color: red;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 0.75rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .dropdown-alert {
        position: absolute;
        top: 30px;
        width: 280px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 1000;
        max-height: 400px; 
        overflow-y: auto; 
    }

    .dropdown-item {
        cursor: pointer;
    }

    .rtl-alert {
        left: 0; }

    .ltr-alert {
        right: -19px;
    }
</style>
@code {
    private bool isArabic => CultureInfo.CurrentCulture.Name.StartsWith("ar");
    private bool showDropdown = false;
    protected override async Task OnInitializedAsync()
    {
        NotificationState.OnChange += StateHasChanged;
        await NotificationState.InitializeAsync();

        NotificationService.OnNewReport += HandleNewReport;

        var lastVisitStr = await JS.InvokeAsync<string>("localStorage.getItem", "LastVisit");
        DateTime lastVisit = DateTime.MinValue;
        if (!string.IsNullOrEmpty(lastVisitStr))
        {
            DateTime.TryParse(lastVisitStr, out lastVisit);
        }
        var response = await ReportService.GetNewReportsAsync(lastVisit);
        if (response.Success && response.Data != null)
        {
            foreach (var report in response.Data)
            {
                await NotificationState.AddReportAsync(report);
            }
        }
        await NotificationService.StartAsync();
        await JS.InvokeVoidAsync("localStorage.setItem", "LastVisit", DateTime.UtcNow.ToString("o"));
    }


    private void ToggleDropdown() => showDropdown = !showDropdown;

    private async void HandleNewReport(ReportDTO report)
    {
        await NotificationState.AddReportAsync(report);
        await JS.InvokeVoidAsync("localStorage.setItem", "LastVisit", DateTime.UtcNow.ToString("o"));
        await InvokeAsync(StateHasChanged);
    }

    private async Task NavigateToReport(Guid id)
    {
        await NotificationState.RemoveReportAsync(id);
        showDropdown = false;
        await JS.InvokeVoidAsync("localStorage.setItem", "LastVisit", DateTime.UtcNow.ToString("o"));


        NavigationManager.NavigateTo($"/reportdetails/{id}", forceLoad: true);
    }

    private async Task ClearNotifications()
    {
        await NotificationState.ClearReportsAsync();
        showDropdown = false;
        await JS.InvokeVoidAsync("localStorage.setItem", "LastVisit", DateTime.UtcNow.ToString("o"));
    }

    public void Dispose()
    {
        NotificationState.OnChange -= StateHasChanged;
        NotificationService.OnNewReport -= HandleNewReport;
    }
}