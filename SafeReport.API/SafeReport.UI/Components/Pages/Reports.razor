@page "/reports"
@using SafeReport.UI.DTOs
@using SafeReport.UI.Services
@inject SafeReport.UI.Interfaces.IReportService ReportService

<h3 class="mb-4">Reports List</h3>

@if (reports is null)
{
    <p>Loading reports...</p>
}
else if (reports.Count == 0)
{
    <p>No reports available.</p>
}
else
{
    <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th>Type</th>
                <th>Description</th>
                <th>Created Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in reports)
            {
                <tr>
                    <td>@report.ReportType</td>
                    <td>@report.Description</td>
                    <td>@report.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => PrintReport(report.Id)">
                            <i class="bi bi-printer"></i> Print
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteReport(report.Id)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ReportDTO>? reports;

    protected override async Task OnInitializedAsync()
    {
        reports = await ReportService.GetAllReportsAsync();
    }

    private async Task PrintReport(int id)
    {
        await ReportService.PrintReportAsync(id);
    }

    private async Task DeleteReport(int id)
    {
        bool deleted = await ReportService.DeleteReportAsync(id);
        if (deleted)
        {
            reports = reports?.Where(r => r.Id != id).ToList();
        }
    }
}
